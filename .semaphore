#!/usr/bin/env bash
N="$SEMAPHORE_PROJECT_NAME"
V2=-140
JOBS=(
  'TARGET=n DIR=src KERN=K24 V1=5x EXT=trx'
  'TARGET=w DIR=src KERN=K24 V1=5x EXT=trx'
  'TARGET=e DIR=src KERN=K24 V1=5x EXT=trx'
  'TARGET=r2e DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2c DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2d DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2g DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2t DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2b DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2v DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2m DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2i DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2j DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r2f DIR=src-rt KERN=K26 V1=RT-N5x- EXT="{trx,bin}"'
  'TARGET=r2z DIR=src-rt KERN=K26 V1=RT-N5x- EXT=trx'
  'TARGET=r7000e DIR=src-rt-6.x.4708 V1=ARM EXT=trx'
)
  # 'TARGET=v2e DIR=src-rt KERN=K26 V1=RT-N5x- EXT=chk'
  # 'TARGET=v2z DIR=src-rt KERN=K26 V1=RT-N5x- EXT=chk'

setup() {
  [[ -e "${SETUP:=$HOME/setup-done}" ]] && return
  set -x
  export DEBIAN_FRONTEND=noninteractive
  sudo -E apt-get -qq install p7zip
  sudo -E apt-get -qq --ignore-missing --auto-remove --fix-broken purge \
    'postgresql.*' 'mongodb.*' 'qt.*' '.*-dev' 'google-chrome.*' 'mysql.*' 'gradle.*' '.*python.*' 'openjdk.*' 'erlang.*' \
    chef rethinkdb elasticsearch libgl1-mesa-dri
  sudo -E apt-get -qq --purge autoremove
  #dpkg-query --show --showformat='${Package;-50}\t${Installed-Size}\n' | sort -k 2 -n -r | head -50
  cd ~; curl -sSLO https://raw.githubusercontent.com/slodki/github-releases-upload/master/github_releases_upload.sh \
    && chmod +x github_releases_upload.sh; cd -
#  docker-cache restore
  docker build -t buildenv --build-arg myuser="$N" --build-arg uid=$UID - <<-'eof'
	FROM debian:stretch-slim
	LABEL Description="tomato firmware build environment" Vendor="slodki" Version="1.1"
	ARG myuser
	ARG uid
	ENV DEBIAN_FRONTEND=noninteractive \
	    PATH=$PATH:/home/$myuser/hndtools/bin
	RUN dpkg --add-architecture i386 && apt-get -qq update && \
	  apt-get -qq --no-install-suggests --no-install-recommends install \
	    autoconf autogen automake autopoint binutils bison build-essential bzip2 flex g++ gawk gcc gcc-multilib \
	    gettext gperf intltool lib32stdc++6 lib32z1-dev libc6 libcurl4-openssl-dev libelf1:i386 libevent-dev libglib2.0-dev \
	    libncurses5 libncurses5-dev libnfnetlink0 libssl-dev libstdc++5 libtool libxml2-dev m4 make \
	    mtd-utils net-tools patch pkg-config xsltproc zlib1g-dev \
	  && rm -rf /var/lib/apt/lists/*
	RUN useradd -Ums /bin/bash -u $uid $myuser
	USER $myuser
	WORKDIR /home/$myuser/$myuser
	eof
#  docker-cache snapshot
  { set +x; } 2>/dev/null
  touch "$SETUP"
}

build_deploy() {
  [[ -d "release/$DIR" ]] || { log err "sources not found in release/$DIR"; return; }
  setup
  set -x
  git reset --hard && git clean -dxfq
  docker run --rm -i -v "$SEMAPHORE_PROJECT_DIR:/home/$N/$N" buildenv bash <<-eof
	set -ex
	HNDTOOLS="/home/$N/$N/tools/brcm/$KERN/hndtools-mipsel-uclibc-4.2.4"
	[[ -d "\$HNDTOOLS" ]] || HNDTOOLS="/home/$N/$N/release/$DIR/toolchains/hndtools-arm-linux-2.6.36-uclibc-4.5.3"
	ln -svf "\$HNDTOOLS" "/home/$N/hndtools"
	make -C "release/$DIR" distclean V1="$V1" V2="$V2" $TARGET
	eof
  FILES=( $(shopt -s nullglob; echo $(shopt -u nullglob; eval echo ./release/$DIR/image/tomato-*.$EXT)) )
  PKG="$FILES"
  if (( ${#FILES[@]}>1 )); then
    PKG="${PKG/#*\//\/tmp\/}" PKG="${PKG%.*}.7z"
    7zr a -bd "$PKG" "${FILES[@]}"
  fi
  [[ "$PKG" && ${GITHUB_TOKEN:+x} ]] && ~/github_releases_upload.sh "$SEMAPHORE_REPO_SLUG" "$BRANCH_NAME-$SEMAPHORE_BUILD_NUMBER-sem" \
    "$PKG" draft "$REVISION" "test build $SEMAPHORE_BUILD_NUMBER of $BRANCH_NAME" \
    "Firmware build on [Semaphore CI](https://semaphoreci.com/$SEMAPHORE_REPO_SLUG/branches/$BRANCH_NAME/builds/$SEMAPHORE_BUILD_NUMBER)"
  { set +x; } 2>/dev/null
}

log() {
  [[ "$1" == err ]] && { C=1; shift; } || C=2
  echo -e "\033[1;3${C}m$*\033[m"
}

set -e; unset SETUP
[[ $SEMAPHORE_CURRENT_THREAD ]] || exit 1
for ((i=SEMAPHORE_CURRENT_THREAD;i<=${#JOBS[*]};i+=SEMAPHORE_THREAD_COUNT)); do
  unset TARGET DIR KERN V1 EXT
  source <(echo ${JOBS[i-1]})
  if [[ "$DIR" && "$TARGET" ]]; then
    log "Building $TARGET image:"
    build_deploy
    log "Finished $TARGET."
  fi
done
[[ $SETUP ]] || log Nothing to do.
